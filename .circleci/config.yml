version: 2.1

anchors:
  docker:
    gradle_docker: &sbt_docker
      docker:
        - image: circleci/openjdk:8u181-jdk
  workspace:
    save_workspace: &save_workspace
      persist_to_workspace:
        root: ./workspace
        paths:
          - '*'
    load_workspace: &load_workspace
      attach_workspace:
        at: '/tmp/workspace'
  commands:
    pull_submodules: &pull_submodules
      run:
        name: "Pull Submodules"
        command: |
          git submodule sync
          git submodule update --init

  cache:
    dependencies:
      save: &save_dependencies
        save_cache:
          paths:
            - ~/.ivy2/cache
            - ~/.m2
            - ~/.cache/coursier/v1
            - ~/.sbt
          key: sbt-repo-v3-{{ .Branch }}-{{ checksum "build.sbt" }}
      restore: &restore_dependencies
        restore_cache:
          keys:
            - sbt-repo-v3-{{ .Branch }}-{{ checksum "build.sbt" }}
            - sbt-repo-v3-{{ .Branch }}-
            - sbt-repo-v3-
      ## CIでのcheckoutはファイルのタイムスタンプをチェックアウト時刻に設定するため、
      ## そのままビルドするとlocalDependenciesにあるjarに変更が行われたと見なされ
      ## 不要なインクリメンタルコンパイルが走る
      ## タイムスタンプをコミット時刻に設定することでこれが回避できる
      restore_local_dependencies_timestamps: &restore_local_dependencies_timestamps
        run:
          name: Restore timestamps of files in localDependencies
          ## 参考
          ## https://qiita.com/tomlla/items/219cea9dd071c8a9e147
          command: |
            for jar in localDependencies/*.jar; do
              timestamp=`git log -1 --pretty=format:'%cd' --date=format:'%Y%m%d%H%M.%S' $jar`
              touch -t "$timestamp" $jar
            done
    build_cache:
      ## 圧縮時にタイムスタンプが丸められるため、
      ## オプション付きで圧縮をしたものをキャッシュとして保存しないと
      ## コンパイルがインクリメンタルになってくれない
      ## https://kurochan-note.hatenablog.jp/entry/2018/03/21/162929
      archive: &archive_build_cache
        run:
          name: Archive build cache
          command: |
            mkdir -p ~/.build_cache
            tar --format posix -cvf ~/.build_cache/cache_target.tar target/ > /dev/null
            tar --format posix -cvf ~/.build_cache/cache_project_target.tar project/target/ > /dev/null
            tar --format posix -cvf ~/.build_cache/cache_project_project_target.tar project/project/target > /dev/null
      save: &save_build_cache
        ## 毎回ビルド結果をキャッシュする。次のビルドにて
        ##  build-cache-v3-{{ .Branch }}
        ## までが等しい最新のキャッシュが使われるから、コンパイルはインクリメンタルになる。
        save_cache:
          paths:
            - ~/.build_cache
          key: build-cache-v4-{{ .Branch }}-{{ epoch }}

      restore: &restore_build_cache
        restore_cache:
          ## ブランチ間でのビルドキャッシュ共有は行わない
          keys:
            - build-cache-v4-{{ .Branch }}-
      unarchive: &unarchive_build_cache
        run:
          name: Unarchive build cache
          command: |
            if [ -e ~/.build_cache ]; then
              if test -n "$(find ~/.build_cache -name 'cache_*.tar')"; then
                cat ~/.build_cache/cache_*.tar | tar xvf - -i > /dev/null
              fi
            fi

jobs:
  ## 同じブランチ上のビルドキャッシュを使ってビルドを行い、テストする
  incremental_build_and_test:
    <<: *sbt_docker
    working_directory: ~/repo
    steps:
      - checkout
      - *pull_submodules
      - *restore_dependencies
      - *restore_build_cache
      - *unarchive_build_cache
      - *restore_local_dependencies_timestamps

      - run: du -h --max-depth=2 ~
      - run: |
          ./sbt assembly
          mkdir -p workspace/builds
          cp target/build/**.jar workspace/builds
      - *save_workspace
      - *save_dependencies

      - run: rm -rf target/build
      - *archive_build_cache
      - *save_build_cache
  full_build_and_test:
    <<: *sbt_docker
    working_directory: ~/repo
    steps:
      - checkout
      - *pull_submodules
      - *restore_dependencies

      - run: du -h --max-depth=2 ~
      - run: |
          ./sbt assembly
          mkdir -p workspace/builds
          cp target/build/**.jar workspace/builds

      - *save_workspace
      - *save_dependencies
  deploy_debug:
    <<: *sbt_docker
    working_directory: ~/repo
    steps:
      - *load_workspace
      - run: du -h --max-depth=2 /tmp/workspace/builds
      - run: scp -v -oStrictHostKeyChecking=no -P $HOST_PORT /tmp/workspace/builds/**.jar $DEBUG_DEPLOY_TARGET_HOST
  deploy_production:
    <<: *sbt_docker
    working_directory: ~/repo
    steps:
      - *load_workspace
      - run: du -h --max-depth=2 /tmp/workspace/builds
      - run: scp -v -oStrictHostKeyChecking=no -P $HOST_PORT /tmp/workspace/builds/**.jar $PRODUCTION_DEPLOY_TARGET_HOST

workflows:
  version: 2
  test_and_build:
    jobs:
      - incremental_build_and_test:
          filters:
            branches:
              ignore:
                - master
      - full_build_and_test:
          filters:
            branches:
              only:
                - master
      - deploy_production:
          requires:
            - full_build_and_test
      - deploy_debug:
          requires:
            - incremental_build_and_test
          filters:
            branches:
              only:
                - develop
