name: 1.18 build check

on:
  push:
    branches:
      - 1_16_to_1_18
    paths:
      - src/**
      - build.sbt
      - .scalafix.conf
      - .scalafmt.conf
      - project/*
      - .github/workflows/**.yml
      - .github/actions/**/**.yml

jobs:
  build_check:
    env:
      BUILD_ENVIRONMENT_IS_CI_OR_LOCAL: "CI"
      JVM_OPTS: "-XX:+UnlockExperimentalVMOptions -XX:-UseJVMCICompiler"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version-file: '.java-version'
          cache: 'sbt'

      - name: Prepare build cache
        if: github.ref != 'refs/heads/master'
        uses: actions/cache@v3
        env:
          cache-name: cache-build
          cache-version: v-5
        with:
          path: |
            target
            project/target
            project/project/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-

      # CIでのcheckoutはファイルのタイムスタンプをチェックアウト時刻に設定するため、
      # そのままビルドするとlocalDependenciesにあるjarに変更が行われたと見なされ
      # 不要なインクリメンタルコンパイルが走る
      # タイムスタンプをコミット時刻に設定することでこれが回避できる
      - name: Restore localDependencies' timestamps
        # 参考: https://qiita.com/tomlla/items/219cea9dd071c8a9e147
        run: |
          for jar in localDependencies/*.jar; do
            timestamp=`git log -1 --pretty=format:'%cd' --date=format:'%Y%m%d%H%M.%S' $jar`
            touch -t "$timestamp" $jar
          done
      # scalapbは.protoの再コンパイルの必要性を判定する際にタイムスタンプを見ているから、コミット時刻に合わせる
      - name: Restore protocol timestamps
        ## 参考: https://qiita.com/tomlla/items/219cea9dd071c8a9e147
        run: |
          for proto in protocol/*.proto; do
            timestamp=`git log -1 --pretty=format:'%cd' --date=format:'%Y%m%d%H%M.%S' $proto`
            touch -t "$timestamp" $proto
          done

      - name: Check format with Scalafmt
        run: ./sbt scalafmtCheckAll

      - name: Check lint with Scalafix on push
        run: ./sbt "scalafix --check"

      - name: Test and build artifact
        run: ./sbt assembly

      - name: Clean build artifact for caching target folder
        run: rm -r target/build
