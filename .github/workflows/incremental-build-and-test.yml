name: Incremental build and test

on:
  push:
    branches:
      - '!master'
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    container: ghcr.io/giganticminecraft/seichiassist-builder:1a64049
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Prepare build dependencies cache
        uses: actions/cache@v2
        env:
          cache-name: cache-build-dependencies
          cache-version: v-minus-1
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier/v1
            ~/.sbt
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-${{ github.ref }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.cache-version }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Prepare build cache
        uses: actions/cache@v2
        env:
          cache-name: cache-build
          cache-version: v-minus-1
        with:
          path: |
            target
            project/target
            project/project/target

      ## CIでのcheckoutはファイルのタイムスタンプをチェックアウト時刻に設定するため、
      ## そのままビルドするとlocalDependenciesにあるjarに変更が行われたと見なされ
      ## 不要なインクリメンタルコンパイルが走る
      ## タイムスタンプをコミット時刻に設定することでこれが回避できる
      - name: Restore localDependencies' timestamps
        ## 参考: https://qiita.com/tomlla/items/219cea9dd071c8a9e147
        run: |
          for jar in localDependencies/*.jar; do
            timestamp=`git log -1 --pretty=format:'%cd' --date=format:'%Y%m%d%H%M.%S' $jar`
            touch -t "$timestamp" $jar
          done

      - name: Test and build artifact
        run: sbt assembly

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: SeichiAssist-build
          path: target/build/**.jar

      - name: Clean build artifact for caching target folder
        run: rm -r target/build

  deploy-artifact:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: SeichiAssist-build
        id: download
      - name: Inspect artifact
        run: du -h --max-depth=2 ${{ steps.download.outputs.download-path }}
      - name: Deploy to staging environment
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.STAGING_KEY }}
          host: ${{ secrets.STAGING_HOST }}
          port: ${{ secrets.STAGING_PORT }}
          source: ${{ steps.download.outputs.download-path }}/**.jar
          username: ${{ secrets.STAGING_USERNAME }}
          remote_dir: ${{ secrets.STAGING_REMOTE_DIR }}
